{"ast":null,"code":"var _jsxFileName = \"/Users/jasonhensley/Desktop/Class/CISC275/tasks/src/form-components/EditMode.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EditMode() {\n  _s();\n\n  const [editMode, setEditMode] = useState(false);\n  const [boolStudent, setBoolStudent] = useState(true);\n  const [name, setName] = useState(\"Your Name\");\n\n  function updateEditMode(editMode) {\n    setEditMode(!editMode);\n  }\n\n  function updateName(event) {\n    setName(event.target.value);\n  }\n\n  function updateBoolStudent() {\n    setBoolStudent(!boolStudent);\n  }\n\n  function OutputString(name, boolStudent) {\n    let ret = \"\";\n\n    if (boolStudent === true) {\n      ret = \"is a student\";\n    } else {\n      ret = \"is not a student\";\n    }\n\n    return ret;\n  }\n\n  function ShowHide(editMode) {\n    const editStuff = document.getElementById(\"editStuff\");\n    const disp = document.getElementById(\"disp\");\n\n    if (editMode === true && editStuff !== null && disp !== null) {\n      editStuff.style.display = \"block\";\n      disp.style.display = \"block\";\n    }\n\n    if (editMode === false && editStuff !== null && disp !== null) {\n      editStuff.style.display = \"none\";\n      disp.style.display = \"none\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Edit Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n      type: \"switch\",\n      id: \"editModeSwitch\",\n      label: \"Edit Mode\",\n      checked: editMode,\n      onChange: () => updateEditMode(editMode)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"editStuff\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formName\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          value: name,\n          onChange: updateName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n        type: \"checkbox\",\n        id: \"is-student-check\",\n        label: \"Student?\",\n        checked: boolStudent,\n        onChange: updateBoolStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"disp\",\n      children: name + \" \" + OutputString(name, boolStudent)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), ShowHide(editMode)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditMode, \"dmDGRkCQFJuEnLIydSbpSN9MHqE=\");\n\n_c = EditMode;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMode\");","map":{"version":3,"sources":["/Users/jasonhensley/Desktop/Class/CISC275/tasks/src/form-components/EditMode.tsx"],"names":["React","useState","Form","EditMode","editMode","setEditMode","boolStudent","setBoolStudent","name","setName","updateEditMode","updateName","event","target","value","updateBoolStudent","OutputString","ret","ShowHide","editStuff","document","getElementById","disp","style","display"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nexport function EditMode(): JSX.Element {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [boolStudent, setBoolStudent] = useState<boolean>(true);\n    const [name, setName] = useState<string>(\"Your Name\");\n\n    function updateEditMode(editMode: boolean) {\n        setEditMode(!editMode);\n    }\n\n    function updateName(event: React.ChangeEvent<HTMLInputElement>) {\n        setName(event.target.value);\n    }\n\n    function updateBoolStudent() {\n        setBoolStudent(!boolStudent);\n    }\n\n    function OutputString(name: string, boolStudent: boolean): string {\n        let ret = \"\";\n        if (boolStudent === true) {\n            ret = \"is a student\";\n        } else {\n            ret = \"is not a student\";\n        }\n        return ret;\n    }\n\n    function ShowHide(editMode: boolean) {\n        const editStuff = document.getElementById(\"editStuff\");\n        const disp = document.getElementById(\"disp\");\n        if (editMode === true && editStuff !== null && disp !== null) {\n            editStuff.style.display = \"block\";\n            disp.style.display = \"block\";\n        }\n        if (editMode === false && editStuff !== null && disp !== null) {\n            editStuff.style.display = \"none\";\n            disp.style.display = \"none\";\n        }\n    }\n\n    return (\n        <div>\n            <h3>Edit Mode</h3>\n            <Form.Switch\n                type=\"switch\"\n                id=\"editModeSwitch\"\n                label=\"Edit Mode\"\n                checked={editMode}\n                onChange={() => updateEditMode(editMode)}\n            />\n            <div id=\"editStuff\">\n                <Form.Group controlId=\"formName\">\n                    <Form.Label>Name:</Form.Label>\n                    <Form.Control value={name} onChange={updateName} />\n                </Form.Group>\n                <Form.Check\n                    type=\"checkbox\"\n                    id=\"is-student-check\"\n                    label=\"Student?\"\n                    checked={boolStudent}\n                    onChange={updateBoolStudent}\n                />\n            </div>\n            <div id=\"disp\">{name + \" \" + OutputString(name, boolStudent)}</div>\n            {ShowHide(editMode)}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}