{"ast":null,"code":"var _jsxFileName = \"/Users/jasonhensley/Desktop/Class/CISC275/tasks/src/form-components/MultipleChoiceQuestion.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MultipleChoiceQuestion(_ref) {\n  _s();\n\n  let {\n    options,\n    expectedAnswer\n  } = _ref;\n  const [answer, setAnswer] = useState(options[0]);\n\n  function updateAnswer(event) {\n    setAnswer(event.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Multiple Choice Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"multipleChoiceDropdown\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n        value: answer,\n        onChange: updateAnswer,\n        children: options.map(thisOption => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: thisOption,\n          children: thisOption\n        }, thisOption, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: answer === expectedAnswer ? \"✔️\" : \"❌\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MultipleChoiceQuestion, \"dL2QEH7jazMwX8osoUDKwI6o/Y4=\");\n\n_c = MultipleChoiceQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleChoiceQuestion\");","map":{"version":3,"sources":["/Users/jasonhensley/Desktop/Class/CISC275/tasks/src/form-components/MultipleChoiceQuestion.tsx"],"names":["React","useState","Form","MultipleChoiceQuestion","options","expectedAnswer","answer","setAnswer","updateAnswer","event","target","value","map","thisOption"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,OAAO,SAASC,sBAAT,OAMS;AAAA;;AAAA,MANuB;AACnCC,IAAAA,OADmC;AAEnCC,IAAAA;AAFmC,GAMvB;AACZ,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAACG,OAAO,CAAC,CAAD,CAAR,CAApC;;AAEA,WAASI,YAAT,CAAsBC,KAAtB,EAAmE;AAC/DF,IAAAA,SAAS,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACH;;AAED,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,wBAAtB;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAEL,MAApB;AAA4B,QAAA,QAAQ,EAAEE,YAAtC;AAAA,kBACKJ,OAAO,CAACQ,GAAR,CAAaC,UAAD,iBACT;AAAyB,UAAA,KAAK,EAAEA,UAAhC;AAAA,oBACKA;AADL,WAAaA,UAAb;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAYI;AAAA,gBAAOP,MAAM,KAAKD,cAAX,GAA4B,IAA5B,GAAmC;AAA1C;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GA7BeF,sB;;KAAAA,sB","sourcesContent":["import React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nexport function MultipleChoiceQuestion({\n    options,\n    expectedAnswer\n}: {\n    options: string[];\n    expectedAnswer: string;\n}): JSX.Element {\n    const [answer, setAnswer] = useState(options[0]);\n\n    function updateAnswer(event: React.ChangeEvent<HTMLSelectElement>) {\n        setAnswer(event.target.value);\n    }\n\n    return (\n        <div>\n            <h3>Multiple Choice Question</h3>\n            <Form.Group controlId=\"multipleChoiceDropdown\">\n                <Form.Label></Form.Label>\n                <Form.Select value={answer} onChange={updateAnswer}>\n                    {options.map((thisOption: string) => (\n                        <option key={thisOption} value={thisOption}>\n                            {thisOption}\n                        </option>\n                    ))}\n                </Form.Select>\n            </Form.Group>\n            <span>{answer === expectedAnswer ? \"✔️\" : \"❌\"}</span>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}